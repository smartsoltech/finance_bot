import telebot
from telebot import types
from main import load_config, load_translation
import yaml
from log import log_decorator
from db_operations import set_user_language, update_user_language, check_user_exists, get_user_language, register_user

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()
bot_token = config['bot_token']

# –∑–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞
@log_decorator
def load_language_pack(lang_code):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —è–∑—ã–∫–∞."""
    print(f'–≤—ã–±—Ä–∞–Ω —è–∑—ã–∫ {lang_code}')
    try:
        with open(f'lang/{lang_code}.yaml', 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
        print(file)
    except Exception as e:
        print(f"Error loading language pack for {lang_code}: {e}")
        return None
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)

@log_decorator
@bot.callback_query_handler(func=lambda call: call.data in ['en', 'ru', 'ko', 'uz', 'kz'])
def set_language(call):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    set_user_language(call.message.chat.id, call.data)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    lang_package = load_language_pack(call.data)
    
    if lang_package:
        bot.answer_callback_query(call.id, lang_package['language_set'])
        bot.send_message(call.message.chat.id, lang_package['set_language'])
        bot.send_message(call.message.chat.id, f"{lang_package['welcome']}, {call.from_user.first_name}. {lang_package['greetings']}", parse_mode="HTML")

    else:
        bot.answer_callback_query(call.id, "Error!")

# ==== –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@log_decorator
def lang_keyboard(cb_param):
    """
    Create and return the language selection keyboard.
    
    Returns:
    - InlineKeyboardMarkup: The created keyboard.
    """
    print(f'–ø—Ä–∏–Ω—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã {cb_param}')
    markup = types.InlineKeyboardMarkup(row_width=2)  # Set row_width to 2 for a more organized layout
    buttons = [
        types.InlineKeyboardButton('üá∫üá∏ English', callback_data=f'{cb_param}_en'),
        types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=f'{cb_param}_ru'),
        types.InlineKeyboardButton('üá∞üá∑ ÌïúÍµ≠Ïñ¥', callback_data=f'{cb_param}_ko'),
        types.InlineKeyboardButton('üá∫üáø O\'zbek', callback_data=f'{cb_param}_uz'),
        types.InlineKeyboardButton('üá∞üáø “ö–∞–∑–∞“õ—à–∞', callback_data=f'{cb_param}_kz')
    ]
    markup.add(*buttons)  # Unpacking the list to add all buttons
    return markup

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    if not check_user_exists(user_id):
        # If user is not registered, offer registration
        bot.send_message(user_id, "Looks like you're not registered. Let's start with choosing your language:")
        bot.send_message(user_id, "Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:", reply_markup=lang_keyboard("register"))
    else:
        user_language = get_user_language(user_id)  # Assuming you have a function to get user's preferred language
        greeting = load_translation("greetings", user_language)
        bot.send_message(user_id, greeting)

@bot.callback_query_handler(func=lambda call: call.data.startswith('register_'))
@log_decorator
def register_bot_user(call):
    user_id = call.message.chat.id
    first_name = call.message.chat.first_name
    last_name = call.message.chat.last_name or ''  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å —Ñ–∞–º–∏–ª–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
    uid = str(user_id)  # –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ uid. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞ —Å–≤–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ uid.
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö:
    chosen_language = call.data.split('_')[1]

    registered_user = register_user(user_id, chosen_language, first_name, last_name, uid)
    if registered_user:
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="You have been successfully registered!")
    else:
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="Error registering. Please try again later.")
          
# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def send_help(message):
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    bot.send_message(message.chat.id, "This is a financial management bot...")


# ====== —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
@bot.message_handler(commands=['change_language'])
@log_decorator
def change_language_command(message):
    user_id = message.chat.id
    user_language = get_user_language(user_id)

    if check_user_exists(user_id):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        msg = load_translation("choose_language", user_language)
        bot.send_message(user_id, msg, reply_markup=lang_keyboard('change lang'))
    else:
        msg = load_translation("please_register_first", user_language)
        bot.send_message(user_id, msg)

@bot.callback_query_handler(func=lambda call: call.data.startswith('change lang'))
@log_decorator
def change_language_callback(call):
    print(f'–ø—Ä–∏–Ω—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ change_language_callback{call.data}')
    user_id = call.message.chat.id
    language = call.data.split('_')[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ callback_data 
    print(f'–ø–æ–ª—É—á–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}')
    if not set_user_language(user_id, language):  # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ —á–∞—Ç–µ
        print(user_id, language)
        update_user_language(user_id, language) # —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ –±–¥
        # –ø—Ä–æ–≤–µ–∫—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —è–∑—ã–∫–∞
        if get_user_language(user_id) == language:
            success_msg = load_translation("language_changed", language)
            bot.answer_callback_query(call.id, success_msg)
            welcome_msg = load_translation("welcome", language)
            bot.send_message(call.message.chat.id, welcome_msg)
        else:
            error_msg = load_translation("error", language)
            bot.answer_callback_query(call.id, error_msg)
            print(f'1')
    else:
            error_msg = load_translation("error", language)
            bot.answer_callback_query(call.id, error_msg)
            print(f'2')
        
if __name__ == "__main__":
    bot.polling(none_stop=True)
